import React from "react";
import ImgixClient from "imgix-core-js";
import LazyAsset from "lazy-asset-react";

const IMGIX_DOMAIN_RATIO = "ratio-dev.imgix.net";
const IMGIX_SECRET_RATIO = "T9S4mPu4pDgCetNw";

const RESOLUTIONS = [210, 420, 768, 1024, 1400, 1600, 1920];

class LazyAssetWrapper extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            loaded: false
        };
    }

    init() {
        // Images
        if (this.props.image.source === "imgix-ratio") {
            this.client = new ImgixClient({
                domains: IMGIX_DOMAIN_RATIO,
                secureURLToken: IMGIX_SECRET_RATIO
            });

            switch (this.props.crop) {
                case "natural":
                    this.images = this.getImages(
                        this.props.image,
                        this.props.image.w / this.props.image.h
                    );
                    break;
                case "panoramic":
                    this.images = this.getImages(this.props.image, 2.5);
                    break;
                case "landscape":
                    this.images = this.getImages(this.props.image, 1.4);
                    break;
                case "landscape_portrait":
                    this.images = this.getImages(this.props.image, 1.4).concat(
                        this.getImages(this.props.image, 0.7)
                    );
                    break;
                case "portrait":
                    this.images = this.getImages(this.props.image, 0.7);
                    break;
                case "square":
                    this.images = this.getImages(this.props.image, 1);
                    break;
                case "nearest": {
                    let naturalAspectRatio =
                        this.props.image.w / this.props.image.h;
                    let ratio = 1.4;
                    if (
                        naturalAspectRatio <= 1.2 &&
                        naturalAspectRatio > 0.85
                    ) {
                        ratio = 1;
                    }
                    if (naturalAspectRatio < 0.85) {
                        ratio = 0.7;
                    }
                    this.getImages(this.props.image, ratio);
                    break;
                }
                default:
                    throw new Error(
                        `You didn't define crop for  ${this.props.image.path}`
                    );
            }
            // Placeholder

            this.placeholderUrl = this.client.buildURL(this.props.image.path, {
                w: 32,
                h: Math.round((this.props.image.h / this.props.image.w) * 32),
                blur: 200,
                fit: "crop",
                auto: "compress,format"
            });
        }
    }

    getImages(image, ratio) {
        let images = [];

        RESOLUTIONS.forEach(res => {
            let w = res;
            let h = Math.round(res / ratio);

            let url = this.client.buildURL(image.path, {
                w: w,
                h: h,
                fit: "crop",
                auto: "compress,format"
            });

            images.push({
                w: w,
                h: h,
                url: url
            });
        });

        return images;
    }

    componentDidMount() {
        this.setState({
            loaded: true
        });
    }

    render() {
        this.init();

        let newProps = { ...this.props };

        newProps.images = this.images;
        newProps.loadWhenInViewport = true;
        newProps.load = this.props.load ? this.props.load : this.state.loaded;
        newProps.animationTime =
            typeof this.props.animationTime !== "undefined"
                ? this.props.animationTime
                : 0.5;
        newProps.alt = this.props.image.alt;
        if (typeof this.props.placeholder === "undefined") {
            newProps.placeholder = this.placeholderUrl;
        }

        return <LazyAsset {...newProps} />;
    }
}

export default LazyAssetWrapper;
