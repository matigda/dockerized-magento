import React from "react";
import PropTypes from "prop-types";
import styled from "styled-components";

import { Grid } from "../Layout";

/**
 * TODO: resizing
 * TODO: separate logic from React component to React-independent module
 * TODO: after separation, write tests
 * TODO: check vertical resizing of columns content (like accordions!)
 */

/**
 * Problems:
 *
 * Following use case is interesting:
 *
 * Let's imagine we close accordion in smart column so that it becomes half of its height (and its height will be smaller than viewport height).
 * 1) if we keep stickiness as bottom ({ position: sticky, bottom: 0 }), it will stick to bottom which is obviously stupid (if less than viewport, should stick to top)
 * 2) if we keep stickiness as top  ({ position: sticky, top: -500px }), it will have bad state. It means it will be partly visible although it should be fully visible.
 *
 * Getting reasonable listener on content resize seems not very possible (ResizeListener almost totally not compatible with browsers).
 * This leaves us only with CSS and static approach. Especially because height (accordion anim) might be animated (a lot of events / performance).
 *
 * Finding solution which handles smooth change + good performance is impssible, actually this "smart scrolling" should be implemented by browser vendors (double ended sticky!)
 *
 * Best solution which avoids "jitters" and is most reasonable is:
 * 1) use (2)
 * 2) AS A GUIDELINE: do not create huge accordions etc. It shouldn't be possible to decrease smart column content height by A LOT.
 *
 * Solution (1) would be better if we KNOW that smart content is long enough it will never be higher than viewport.
 *
 * We could keep both strategies possible as an option.
 *
 *
          STANDARD COLUMN
       +----------------------------------+
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |      SMART COLUMN
       |                                  |   +------------------------------+
       |                                  |   |                              |
       |                                  |   |                              |
       |                                  |   |                              |
       |                                  |   |                              |
    +---------------------------------------------------------------------------+
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |                                  |   |                              |  |
    |  |           BROWSER                |   |                              |  |
    +---------------------------------------------------------------------------+
       |                                  |   |                              |
       |                                  |   |                              |
       |                                  |   |                              |
       |                                  |   |                              |
       |                                  |   |                              |
       |                                  |   +------------------------------+
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       |                                  |
       +----------------------------------+



 *
 *
 *
 *
 */

class SmartColumnsLayout extends React.Component {
    constructor(props) {
        super(props);

        this.containerRef = React.createRef();

        this.isScrollingDown = false;
        this.pageYOffset = undefined;

        this.cols = [];

        props.columns.forEach(col => {
            this.cols.push({
                ref: React.createRef(),
                smart: typeof col.smart === "undefined" ? false : col.smart
            });
        });
    }

    _updateValues() {
        this.pageYOffset = window.pageYOffset;

        this.cols.forEach(col => {
            if (!col.smart) {
                return;
            }

            col.rect = col.ref.current.getBoundingClientRect();
        });

        this.containerRect = this.containerRef.current.getBoundingClientRect();
    }

    componentDidMount() {
        this._updateValues();

        window.addEventListener("resize", () => {
            this._updateValues();

            console.log("-----------");
            this.cols.forEach(col => {
                if (col.rect) {
                    console.log("REF width", col.rect.width);
                }
            });
        });

        window.addEventListener("scroll", () => {
            let pageYOffsetPrevious = this.pageYOffset;
            this._updateValues();

            if (this.pageYOffset === pageYOffsetPrevious) {
                return;
            }

            // Changed direction from up to down
            if (
                this.pageYOffset > pageYOffsetPrevious &&
                !this.isScrollingDown
            ) {
                this.cols.forEach(col => {
                    if (!col.smart || col.rect.height < window.innerHeight) {
                        return;
                    }

                    let topSpace = Math.abs(
                        this.containerRect.top - col.rect.top
                    );

                    col.ref.current.style.alignSelf = "flex-end";
                    col.ref.current.style.top = "auto";
                    col.ref.current.style.bottom = 0;
                    col.ref.current.style.marginTop = `${topSpace}px`;
                    col.ref.current.style.marginBottom = 0;

                    // console.log('pyk!');
                    //
                    // col.ref.current.style.alignSelf = "flex-start";
                    // col.ref.current.style.top = `-${col.rect.bottom - window.innerHeight}px`;
                    // col.ref.current.style.bottom = "auto";
                    // col.ref.current.style.marginTop = `${topSpace}px`;
                    // col.ref.current.style.marginBottom = 0;
                });

                this.isScrollingDown = true;
            }
            // Changed direction from down to up
            else if (
                this.pageYOffset < pageYOffsetPrevious &&
                this.isScrollingDown
            ) {
                this.cols.forEach(col => {
                    if (!col.smart || col.rect.height < window.innerHeight) {
                        return;
                    }

                    let bottomSpace = Math.abs(
                        this.containerRect.bottom - col.rect.bottom
                    );

                    col.ref.current.style.alignSelf = "flex-start";
                    col.ref.current.style.top = 0;
                    col.ref.current.style.bottom = "auto";
                    col.ref.current.style.marginTop = 0;
                    col.ref.current.style.marginBottom = `${bottomSpace}px`;
                });

                this.isScrollingDown = false;
            }
        });
    }

    render() {
        return (
            <div className="SmartColumnsLayout">
                <div ref={this.containerRef} style={{ width: "100%" }}>
                    <Grid
                        items={this.props.columns.map((column, index) => {
                            let StickyWrapper = styled.div`
                                position: sticky;
                                position: -webkit-sticky;
                                top: 0px;
                                align-self: flex-start;
                                width: 100%;
                            `;

                            let content;

                            if (column.smart) {
                                content = (
                                    <div
                                        style={{
                                            display: "flex",
                                            position: "relative",
                                            width: "100%",
                                            height: "100%"
                                        }}
                                    >
                                        <StickyWrapper
                                            ref={this.cols[index].ref}
                                        >
                                            {column.content}
                                        </StickyWrapper>
                                    </div>
                                );
                            } else {
                                content = column.content;
                            }

                            return {
                                gridParams: column.gridParams,
                                content: content
                            };
                        })}
                    />
                </div>
            </div>
        );
    }
}

SmartColumnsLayout.propTypes = {
    columns: PropTypes.array
};

export default SmartColumnsLayout;
