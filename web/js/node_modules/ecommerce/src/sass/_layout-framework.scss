///
/// GRID SYSTEM
///

@function get-cols-width($cols, $breakpoint) {
    @return calc(
        calc(
                100vw - #{map-get($grid-margins, $breakpoint)} * 2 + #{map-get(
                        $grid-gutter-widths,
                        $breakpoint
                    )}
            ) * #{$cols / $grid-columns} - #{map-get(
                $grid-gutter-widths,
                $breakpoint
            )}
    );
}

@function get-cols-width100($cols, $breakpoint) {
    @return calc(
        calc(
                100% - #{map-get($grid-margins, $breakpoint)} * 2 + #{map-get(
                        $grid-gutter-widths,
                        $breakpoint
                    )}
            ) * #{$cols / $grid-columns} - #{map-get(
                $grid-gutter-widths,
                $breakpoint
            )}
    );
}

@function get-col-width($breakpoint) {
    @return calc(
        calc(
                calc(100vw - #{map-get($grid-margins, $breakpoint)} * 2) - #{map-get(
                        $grid-gutter-widths,
                        $breakpoint
                    )} * #{$grid-columns - 1}
            ) / #{$grid-columns}
    );
}

//@mixin grid-cols-width($colNum) {
//    @each $breakpoint in map-keys($grid-breakpoints) {
//        @include media-breakpoint-up($breakpoint) {
//            width: get-cols-width($colNum, $breakpoint);
//        }
//    }
//}
//
//@mixin grid-single-col-width() {
//    @each $breakpoint in map-keys($grid-breakpoints) {
//        @include media-breakpoint-up($breakpoint) {
//            width: get-single-column-width($breakpoint);
//        }
//    }
//}

@function get-grid-val($colNum, $gutterNum, $marginNum, $breakpoint) {
    @if $colNum == 0 {
        @return calc(
            #{$gutterNum} * #{map-get($grid-gutter-widths, $breakpoint)} + #{$marginNum} *
                #{map-get($grid-margins, $breakpoint)}
        );
    } @else {
        @return calc(
            #{get-cols-width100($colNum, $breakpoint)} + #{$gutterNum} * #{map-get(
                    $grid-gutter-widths,
                    $breakpoint
                )} + #{$marginNum} * #{map-get($grid-margins, $breakpoint)}
        );
    }
}

@mixin grid-val($field, $colNum, $gutterNum, $marginNum) {
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            #{$field}: get-grid-val(
                $colNum,
                $gutterNum,
                $marginNum,
                $breakpoint
            );
        }
    }
}

//@mixin grid-val2($field, $colNum) {
//    @each $breakpoint in map-keys($grid-breakpoints) {
//        @include media-breakpoint-up($breakpoint) {
//            #{$field}: get-cols-width($colNum, $breakpoint);
//        }
//    }
//}

//@function get-col-width($breakpoint) {
//    @return calc(calc(100vw - #{map-get($container-margins, $breakpoint)}*2 - #{($grid-columns - 1) * map-get($grid-gutter-widths, $breakpoint)})/#{$grid-columns});
//}
//
//@function get-grid-val($colNum, $gutterNum, $marginNum, $breakpoint) {
//
//
//    @return calc(
//            #{$colNum }
//            #{$gutterNum * map-get($grid-gutter-widths, $breakpoint)} +
//            #{$marginNum * map-get($container-margins, $breakpoint)}
//    );
//}
//
//@mixin grid-val($field, $colNum, $gutterNum, $marginNum) {
//    @each $breakpoint in map-keys($container-margins) {
//        @include media-breakpoint-up($breakpoint) {
//            #{$field}: get-grid-val($colNum, $gutterNum, $marginNum, $breakpoint);
//        }
//    }
//}

///
/// Generate semantic grid columns with these mixins
///

@mixin make-container($modePadding: false) {
    @each $breakpoint in map-keys($grid-margins) {
        @include media-breakpoint-up($breakpoint) {
            $margin: map-get($grid-margins, $breakpoint);
            @if ($modePadding) {
                padding-right: ($margin);
                padding-left: ($margin);
            } @else {
                margin-right: ($margin);
                margin-left: ($margin);
                @if ($margin == auto) {
                    max-width: map-get($grid-container-max-width, $breakpoint);
                } @else {
                    width: calc(100% - 2 * #{$margin});
                }
            }
        }
    }
}
@mixin set-gutter-value($param, $multiplier: 1) {
    @each $breakpoint in map-keys($grid-gutter-widths) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($grid-gutter-widths, $breakpoint);
            #{$param}: $gutter * $multiplier;
        }
    }
}

@mixin escape-grid-left() {
    @each $breakpoint in map-keys($grid-margins) {
        @include media-breakpoint-up($breakpoint) {
            $margin: map-get($grid-margins, $breakpoint);
            margin-left: -($margin);
        }
    }
}

@mixin escape-grid-right() {
    @each $breakpoint in map-keys($grid-margins) {
        @include media-breakpoint-up($breakpoint) {
            $margin: map-get($grid-margins, $breakpoint);
            margin-left: 0;
            margin-right: -($margin);
        }
    }
}

@mixin escape-grid() {
    @each $breakpoint in map-keys($grid-margins) {
        @include media-breakpoint-up($breakpoint) {
            $margin: map-get($grid-margins, $breakpoint);
            margin-left: -($margin);
            margin-right: -($margin);
        }
    }
}

.container {
    @include make-container();
}

@mixin make-row($gutters: $grid-gutter-widths) {
    display: flex;
    flex-wrap: wrap;

    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            margin-right: ($gutter / -2);
            margin-left: ($gutter / -2);
        }
    }
}

@mixin make-row-center {
    @include make-row;
    justify-content: center;
}

.row {
    @include make-row();
}

.row-center {
    @include make-row-center;
}

@mixin make-col-ready($gutters: $grid-gutter-widths) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing

    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // width: percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
}

@mixin make-col-offset-after($size, $columns: $grid-columns) {
    margin-right: percentage($size / $columns);
}

@mixin make-negative-offset($size, $columns: $grid-columns) {
    margin-right: calc(-15px - (#{percentage($size / $columns)}));
}

.GridDebugger {
    position: fixed !important;
    height: 100%;
    width: 100%;
    z-index: 20;
    margin: 0;
    pointer-events: none;

    .container {
        height: 100%;
        background: none;
        .col {
            @include make-col(1);
            @include make-col-ready;
            height: 100%;
            .col-inner {
                background: rgba(255, 0, 20, 0.4);
                height: 100%;
            }
            &:nth-child(2n) {
                .col-inner {
                    background-color: rgba(0, 20, 255, 0.4);
                }
            }
        }
    }
}

// VERTICAL SPACING ENGINE

@function get-linear-size($mobile-size, $desktop-size) {
    $a: ($desktop-size - $mobile-size) /
        (
            map-get($grid-breakpoints, $resolution-range-top) -
                map-get(
                    $grid-breakpoints,
                    breakpoint-next($resolution-range-bottom)
                )
        );
    $b: -$a *
        map-get($grid-breakpoints, breakpoint-next($resolution-range-bottom));

    @return calc(#{$a} * 100vw + #{$b + $mobile-size});
}

@mixin vs($field, $mobile-size, $desktop-size) {
    #{$field}: get-linear-size($mobile-size, $desktop-size);

    @include media-breakpoint-down($resolution-range-bottom) {
        #{$field}: $mobile-size;
    }

    @include media-breakpoint-up($resolution-range-top) {
        #{$field}: $desktop-size;
    }
}

@mixin vs-transform($type, $mobile-size, $desktop-size) {
    transform: #{$type} unquote("(") get-linear-size(
            $mobile-size,
            $desktop-size
        ) unquote(")");

    //@include media-breakpoint-down($resolution-range-bottom) {
    //    transform: $mobile-size;
    //}
    //
    //@include media-breakpoint-up($resolution-range-top) {
    //    transform: $desktop-size;
    //}
}
