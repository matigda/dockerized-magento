import {
    breakpointMapForEach,
    generateCSSForBreakpointMap,
    normalizeGridItemParams
} from "../src/helpers/Layout";

describe("normalizeGridItemParams", function() {
    it("works for number", () => {
        let params = normalizeGridItemParams(10);

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(0);
        expect(params.order).toBe(0);
    });

    it("works for array (empty)", () => {
        let params = normalizeGridItemParams([]);

        expect(params.cols).toBe(0);
        expect(params.offset).toBe(0);
        expect(params.order).toBe(0);
    });

    it("works for array (1 param)", () => {
        let params = normalizeGridItemParams([10]);

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(0);
        expect(params.order).toBe(0);
    });

    it("works for array (2 params)", () => {
        let params = normalizeGridItemParams([10, 2]);

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(2);
        expect(params.order).toBe(0);
    });

    it("works for array (3 params)", () => {
        let params = normalizeGridItemParams([10, 2, 5]);

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(2);
        expect(params.order).toBe(5);
    });

    it("works for object (empty)", () => {
        let params = normalizeGridItemParams({});

        expect(params.cols).toBe(0);
        expect(params.offset).toBe(0);
        expect(params.order).toBe(0);
    });

    it("works for object (cols defined)", () => {
        let params = normalizeGridItemParams({ cols: 10 });

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(0);
        expect(params.order).toBe(0);
    });

    it("works for object (cols,offset defined)", () => {
        let params = normalizeGridItemParams({ cols: 10, offset: 2 });

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(2);
        expect(params.order).toBe(0);
    });

    it("works for object (cols, offset, order defined)", () => {
        let params = normalizeGridItemParams({ cols: 10, offset: 2, order: 5 });

        expect(params.cols).toBe(10);
        expect(params.offset).toBe(2);
        expect(params.order).toBe(5);
    });
});

/**
 * This test so far works only with specific LayoutVariables.json. We can't allow for it in the future!!!
 */
describe("breakpointMapForEach", function() {
    let breakpointMap = {
        3000: {
            test: "value for 3000"
        },
        100: {
            test: "value for 100"
        },
        1200: {
            test: "value for 1200"
        },
        lg: {
            test: "value for lg"
        }
    };

    let normalBreakpointMap = {
        xs: {
            test: "value for xs"
        },
        lg: {
            test: "value for lg"
        },
        xxl: {
            test: "value for xxl"
        }
    };
    //
    // let printCSSCallback = ({ minWidth, maxWidth, content, layoutParams }) => {
    //     return `
    //             test: ${content ? content.test : "(null)"};
    //             minWidth: ${minWidth};
    //             maxWidth: ${maxWidth};
    //             gutter: ${layoutParams.gutter};
    //             width: ${layoutParams.width};
    //             margin: ${layoutParams.margin};
    //         `;
    // };
    //
    // it("behaves ", function() {
    //     breakpointMapForEach(
    //         breakpointMap,
    //         ({ minWidth, maxWidth, content, layoutParams }) => {
    //             console.log(
    //                 "range: ",
    //                 minWidth,
    //                 maxWidth,
    //                 content ? content.test : null,
    //                 layoutParams.gutter
    //             );
    //         }
    //     );
    //
    //     console.log("=======");
    //     console.log(
    //         generateCSSForBreakpointMap(breakpointMap, printCSSCallback)
    //     );
    //     console.log("=======");
    //     console.log(
    //         generateCSSForBreakpointMap(normalBreakpointMap, printCSSCallback)
    //     );
    //
    //     expect(true).toBe(true);
    // });
});
